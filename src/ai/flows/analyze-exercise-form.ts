// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Analyzes user exercise form using phone camera and MediaPipe Pose Tracking, providing real-time feedback.
 *
 * - analyzeExerciseForm - A function that handles the exercise form analysis process.
 * - AnalyzeExerciseFormInput - The input type for the analyzeExerciseForm function.
 * - AnalyzeExerciseFormOutput - The return type for the analyzeExerciseForm function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeExerciseFormInputSchema = z.object({
  exerciseName: z.string().describe('The name of the exercise being performed.'),
  videoDataUri: z
    .string()
    .describe(
      "A video of the user performing the exercise, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>' "
    ),
});
export type AnalyzeExerciseFormInput = z.infer<typeof AnalyzeExerciseFormInputSchema>;

const AnalyzeExerciseFormOutputSchema = z.object({
  feedback: z.string().describe('Real-time feedback on the user exercise form.'),
  isCorrectForm: z.boolean().describe('Whether the exercise form is correct or not.'),
});
export type AnalyzeExerciseFormOutput = z.infer<typeof AnalyzeExerciseFormOutputSchema>;

export async function analyzeExerciseForm(input: AnalyzeExerciseFormInput): Promise<AnalyzeExerciseFormOutput> {
  return analyzeExerciseFormFlow(input);
}

const analyzeExerciseFormPrompt = ai.definePrompt({
  name: 'analyzeExerciseFormPrompt',
  input: {schema: AnalyzeExerciseFormInputSchema},
  output: {schema: AnalyzeExerciseFormOutputSchema},
  prompt: `You are a certified personal trainer providing real-time feedback on exercise form.

  Analyze the user's exercise form based on the video provided. Provide feedback on how to correct their form, and whether the form is correct or not.

  Exercise Name: {{{exerciseName}}}
  Video: {{media url=videoDataUri}}`,
});

const analyzeExerciseFormFlow = ai.defineFlow(
  {
    name: 'analyzeExerciseFormFlow',
    inputSchema: AnalyzeExerciseFormInputSchema,
    outputSchema: AnalyzeExerciseFormOutputSchema,
  },
  async input => {
    const {output} = await analyzeExerciseFormPrompt(input);
    return output!;
  }
);
